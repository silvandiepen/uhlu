@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@function convert-to-rem($value, $base-value: $rem-base)  {
  $value: strip-unit($value) / strip-unit($base-value) * 1rem;
  @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
  @return $value;
}

@function rem-calc($values, $base-value: $base-fontsize) {
	$max: length($values);
	@if $max == 1 {
		@return convert-to-rem(nth($values, 1), $base-value);
	}

	$remValues: ();

	@for $i from 1 through $max {
		$remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
	}

	@return $remValues;
}
@function rem($value){
  $sizes: '';
  @if length($value) > 1{
    @each $size in $value{
      $sizes: $sizes #{rem-calc($size)};
    }
  } @else {
  	$sizes: rem-calc($value);
  }
	@return $sizes;
}
@function space($value){
  $size: $value*$space;
  @return rem-calc($size);
}
@function spc($value){
  $size: space($value);
  @return $size;
}
@function even($number) {
  @return $number % 2 == 0;
}


@function calculateRem($size) {
  $remSize: $size / #{$base-fontsize}px;
  @return $remSize * 1rem;
}

@function color($value, $rgba: false, $colorset: $colors, $warning: true, $boolean: false){
  $color: map-get($colorset, $value);
  @if $warning == true{
    @if $color == null{
      @warn 'color: "#{$value}" doesn\'t exist';
    }
  }
  @if $boolean == true{
    @if $color == null{
      @return false;
    } @else { @return true; }
  } @else {
    @if $rgba != false{
      @return rgba($color,$rgba);
    } @else{
      @return $color;
    }
  }
}


@function grid-size($value){
	$size: map-get($grid-size,$value);
	@return $size;
}

// List Functions

@function prepend($list, $value) {
	@return join($value, $list);
}

@function to-string($list, $glue: '', $is-nested: false) {
  $result: null;

  @for $i from 1 through length($list) {
    $e: nth($list, $i);

    @if type-of($e) == list {
      $result: $result#{to-string($e, $glue, true)};
    }

    @else {
      $result: if($i != length($list) or $is-nested, $result#{$e}#{$glue}, $result#{$e});
    }
  }

  @return $result;
}
@function to-list($value) {
  @return if(type-of($value) != list, ($value,), $value);
}

@function long-shadow($direction, $length, $color, $fade: false, $steps: 100) {
  $shadows: ();
  $conversion-map: (
    to top: 180deg,
    to top right: 135deg,
    to right top: 135deg,
    to right: 90deg,
    to bottom right: 45deg,
    to right bottom: 45deg,
    to bottom: 0deg,
    to bottom left: 315deg,
    to left bottom: 315deg,
    to left: 270deg,
    to left top: 225deg,
    to top left: 225deg
  );

  @if map-has-key($conversion-map, $direction) {
    $direction: map-get($conversion-map, $direction);
  }

  @for $i from 1 through $steps {
    $current-step: ($i * $length / $steps);
    $current-color: if(not $fade, $color, if(type-of($fade) == 'color',  mix($fade, $color, ($i / $steps * 100)), rgba($color, 1 - $i / $steps)));

    $shadows: append($shadows, (sin(0deg + $direction) * $current-step) (cos(0deg + $direction) * $current-step) 0 $current-color, 'comma');
  }

  @return $shadows;
}

// Color Function

@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}
@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}


// Calculations
@function pow($number, $exp) {
  $value: 1;
  @if $exp > 0 {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  }
  @else if $exp < 0 {
    @for $i from 1 through -$exp {
      $value: $value / $number;
    }
  }
  @return $value;
}

@function fact($number) {
  $value: 1;
  @if $number > 0 {
    @for $i from 1 through $number {
      $value: $value * $i;
    }
  }
  @return $value;
}

@function pi() {
  @return 3.14159265359;
}

@function rad($angle) {
  $unit: unit($angle);
  $unitless: $angle / ($angle * 0 + 1);
  // If the angle has 'deg' as unit, convert to radians.
  @if $unit == deg {
    $unitless: $unitless / 180 * pi();
  }
  @return $unitless;
}

@function sin($angle) {
  $sin: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);
  }
  @return $sin;
}

@function cos($angle) {
  $cos: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);
  }
  @return $cos;
}

@function tan($angle) {
  @return sin($angle) / cos($angle);
}
@function decimal-round($number, $digits: 0, $mode: round) {
    $n: 1;
    // $number must be a number
    @if type-of($number) != number {
        @warn '#{$number} is not a number.';
        @return $number;
    }
    // $digits must be a unitless number
    @if type-of($digits) != number {
        @warn '#{ $digits} is not a number.';
        @return $number;
    } @else if not unitless($digits) {
        @warn '#{$digits} has a unit.';
        @return $number;
    }
    @for $i from 1 through $digits {
        $n: $n * 10;
    }
    @if $mode == round {
        @return round($number * $n) / $n;
    } @else if $mode == ceil {
        @return ceil($number * $n) / $n;
    } @else if $mode == floor {
        @return floor($number * $n) / $n;
    } @else {
        @warn '#{$mode} is undefined keyword.';
        @return $number;
    }
}
@function decimal-ceil($number, $digits: 0) {
    @return decimal-round($number, $digits, ceil);
}
@function decimal-floor($number, $digits: 0) {
    @return decimal-round($number, $digits, floor);
}
